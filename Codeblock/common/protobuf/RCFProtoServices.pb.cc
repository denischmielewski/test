// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCFProtoServices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RCFProtoServices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PositionInformationTransmit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInformationTransmit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionInformationReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInformationReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOperationModeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOperationModeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOperationModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOperationModeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* traindata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  traindata_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapTrainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapTrainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFleetCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFleetCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFleetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFleetResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PositionInformationService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* SetOperationModeService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* GetFleetService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RCFProtoServices_2eproto() {
  protobuf_AddDesc_RCFProtoServices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RCFProtoServices.proto");
  GOOGLE_CHECK(file != NULL);
  PositionInformationTransmit_descriptor_ = file->message_type(0);
  static const int PositionInformationTransmit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, trainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, kpposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, path_),
  };
  PositionInformationTransmit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInformationTransmit_descriptor_,
      PositionInformationTransmit::default_instance_,
      PositionInformationTransmit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInformationTransmit));
  PositionInformationReceive_descriptor_ = file->message_type(1);
  static const int PositionInformationReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, servername_),
  };
  PositionInformationReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInformationReceive_descriptor_,
      PositionInformationReceive::default_instance_,
      PositionInformationReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInformationReceive));
  SetOperationModeCommand_descriptor_ = file->message_type(2);
  static const int SetOperationModeCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeCommand, mode_),
  };
  SetOperationModeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOperationModeCommand_descriptor_,
      SetOperationModeCommand::default_instance_,
      SetOperationModeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOperationModeCommand));
  SetOperationModeResponse_descriptor_ = file->message_type(3);
  static const int SetOperationModeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeResponse, previousmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeResponse, newmode_),
  };
  SetOperationModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOperationModeResponse_descriptor_,
      SetOperationModeResponse::default_instance_,
      SetOperationModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOperationModeResponse));
  traindata_descriptor_ = file->message_type(4);
  static const int traindata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, kpposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, path_),
  };
  traindata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      traindata_descriptor_,
      traindata::default_instance_,
      traindata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(traindata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(traindata));
  MapTrainData_descriptor_ = file->message_type(5);
  static const int MapTrainData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrainData, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrainData, traindata_),
  };
  MapTrainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapTrainData_descriptor_,
      MapTrainData::default_instance_,
      MapTrainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapTrainData));
  GetFleetCommand_descriptor_ = file->message_type(6);
  static const int GetFleetCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetCommand, ipaddress_),
  };
  GetFleetCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFleetCommand_descriptor_,
      GetFleetCommand::default_instance_,
      GetFleetCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFleetCommand));
  GetFleetResponse_descriptor_ = file->message_type(7);
  static const int GetFleetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetResponse, traindata_),
  };
  GetFleetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFleetResponse_descriptor_,
      GetFleetResponse::default_instance_,
      GetFleetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFleetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFleetResponse));
  PositionInformationService_descriptor_ = file->service(0);
  SetOperationModeService_descriptor_ = file->service(1);
  GetFleetService_descriptor_ = file->service(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RCFProtoServices_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInformationTransmit_descriptor_, &PositionInformationTransmit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInformationReceive_descriptor_, &PositionInformationReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOperationModeCommand_descriptor_, &SetOperationModeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOperationModeResponse_descriptor_, &SetOperationModeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    traindata_descriptor_, &traindata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapTrainData_descriptor_, &MapTrainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFleetCommand_descriptor_, &GetFleetCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFleetResponse_descriptor_, &GetFleetResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RCFProtoServices_2eproto() {
  delete PositionInformationTransmit::default_instance_;
  delete PositionInformationTransmit_reflection_;
  delete PositionInformationReceive::default_instance_;
  delete PositionInformationReceive_reflection_;
  delete SetOperationModeCommand::default_instance_;
  delete SetOperationModeCommand_reflection_;
  delete SetOperationModeResponse::default_instance_;
  delete SetOperationModeResponse_reflection_;
  delete traindata::default_instance_;
  delete traindata_reflection_;
  delete MapTrainData::default_instance_;
  delete MapTrainData_reflection_;
  delete GetFleetCommand::default_instance_;
  delete GetFleetCommand_reflection_;
  delete GetFleetResponse::default_instance_;
  delete GetFleetResponse_reflection_;
}

void protobuf_AddDesc_RCFProtoServices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026RCFProtoServices.proto\"\203\001\n\033PositionInf"
    "ormationTransmit\022\017\n\007trainid\030\001 \001(\t\022\022\n\nkpP"
    "osition\030\002 \001(\002\022\014\n\004mode\030\003 \001(\005\022\020\n\010movement\030"
    "\004 \001(\005\022\021\n\tdirection\030\005 \001(\005\022\014\n\004path\030\006 \001(\t\"0"
    "\n\032PositionInformationReceive\022\022\n\nserverna"
    "me\030\001 \001(\t\"\'\n\027SetOperationModeCommand\022\014\n\004m"
    "ode\030\001 \002(\t\"A\n\030SetOperationModeResponse\022\024\n"
    "\014previousmode\030\001 \002(\t\022\017\n\007newmode\030\002 \002(\t\"`\n\t"
    "traindata\022\022\n\nkpPosition\030\001 \001(\002\022\014\n\004mode\030\002 "
    "\001(\005\022\020\n\010movement\030\003 \001(\005\022\021\n\tdirection\030\004 \001(\005"
    "\022\014\n\004path\030\005 \001(\t\"@\n\014MapTrainData\022\021\n\tipaddr"
    "ess\030\001 \002(\t\022\035\n\ttraindata\030\002 \001(\0132\n.traindata"
    "\"$\n\017GetFleetCommand\022\021\n\tipaddress\030\001 \002(\t\"4"
    "\n\020GetFleetResponse\022 \n\ttraindata\030\001 \003(\0132\r."
    "MapTrainData2n\n\032PositionInformationServi"
    "ce\022P\n\023PositionInformation\022\034.PositionInfo"
    "rmationTransmit\032\033.PositionInformationRec"
    "eive2b\n\027SetOperationModeService\022G\n\020SetOp"
    "erationMode\022\030.SetOperationModeCommand\032\031."
    "SetOperationModeResponse2B\n\017GetFleetServ"
    "ice\022/\n\010GetFleet\022\020.GetFleetCommand\032\021.GetF"
    "leetResponseB\t\200\001\001\210\001\001\220\001\001", 863);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RCFProtoServices.proto", &protobuf_RegisterTypes);
  PositionInformationTransmit::default_instance_ = new PositionInformationTransmit();
  PositionInformationReceive::default_instance_ = new PositionInformationReceive();
  SetOperationModeCommand::default_instance_ = new SetOperationModeCommand();
  SetOperationModeResponse::default_instance_ = new SetOperationModeResponse();
  traindata::default_instance_ = new traindata();
  MapTrainData::default_instance_ = new MapTrainData();
  GetFleetCommand::default_instance_ = new GetFleetCommand();
  GetFleetResponse::default_instance_ = new GetFleetResponse();
  PositionInformationTransmit::default_instance_->InitAsDefaultInstance();
  PositionInformationReceive::default_instance_->InitAsDefaultInstance();
  SetOperationModeCommand::default_instance_->InitAsDefaultInstance();
  SetOperationModeResponse::default_instance_->InitAsDefaultInstance();
  traindata::default_instance_->InitAsDefaultInstance();
  MapTrainData::default_instance_->InitAsDefaultInstance();
  GetFleetCommand::default_instance_->InitAsDefaultInstance();
  GetFleetResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RCFProtoServices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RCFProtoServices_2eproto {
  StaticDescriptorInitializer_RCFProtoServices_2eproto() {
    protobuf_AddDesc_RCFProtoServices_2eproto();
  }
} static_descriptor_initializer_RCFProtoServices_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PositionInformationTransmit::kTrainidFieldNumber;
const int PositionInformationTransmit::kKpPositionFieldNumber;
const int PositionInformationTransmit::kModeFieldNumber;
const int PositionInformationTransmit::kMovementFieldNumber;
const int PositionInformationTransmit::kDirectionFieldNumber;
const int PositionInformationTransmit::kPathFieldNumber;
#endif  // !_MSC_VER

PositionInformationTransmit::PositionInformationTransmit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionInformationTransmit)
}

void PositionInformationTransmit::InitAsDefaultInstance() {
}

PositionInformationTransmit::PositionInformationTransmit(const PositionInformationTransmit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionInformationTransmit)
}

void PositionInformationTransmit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kpposition_ = 0;
  mode_ = 0;
  movement_ = 0;
  direction_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInformationTransmit::~PositionInformationTransmit() {
  // @@protoc_insertion_point(destructor:PositionInformationTransmit)
  SharedDtor();
}

void PositionInformationTransmit::SharedDtor() {
  if (trainid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trainid_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void PositionInformationTransmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInformationTransmit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationTransmit_descriptor_;
}

const PositionInformationTransmit& PositionInformationTransmit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

PositionInformationTransmit* PositionInformationTransmit::default_instance_ = NULL;

PositionInformationTransmit* PositionInformationTransmit::New() const {
  return new PositionInformationTransmit;
}

void PositionInformationTransmit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PositionInformationTransmit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(kpposition_, direction_);
    if (has_trainid()) {
      if (trainid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trainid_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInformationTransmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionInformationTransmit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trainid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trainid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trainid().data(), this->trainid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trainid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_kpPosition;
        break;
      }

      // optional float kpPosition = 2;
      case 2: {
        if (tag == 21) {
         parse_kpPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kpposition_)));
          set_has_kpposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_movement;
        break;
      }

      // optional int32 movement = 4;
      case 4: {
        if (tag == 32) {
         parse_movement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movement_)));
          set_has_movement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional int32 direction = 5;
      case 5: {
        if (tag == 40) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_path;
        break;
      }

      // optional string path = 6;
      case 6: {
        if (tag == 50) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionInformationTransmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionInformationTransmit)
  return false;
#undef DO_
}

void PositionInformationTransmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionInformationTransmit)
  // optional string trainid = 1;
  if (has_trainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainid().data(), this->trainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trainid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trainid(), output);
  }

  // optional float kpPosition = 2;
  if (has_kpposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kpposition(), output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional int32 movement = 4;
  if (has_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->movement(), output);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionInformationTransmit)
}

::google::protobuf::uint8* PositionInformationTransmit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionInformationTransmit)
  // optional string trainid = 1;
  if (has_trainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainid().data(), this->trainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trainid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trainid(), target);
  }

  // optional float kpPosition = 2;
  if (has_kpposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kpposition(), target);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // optional int32 movement = 4;
  if (has_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->movement(), target);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionInformationTransmit)
  return target;
}

int PositionInformationTransmit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trainid = 1;
    if (has_trainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trainid());
    }

    // optional float kpPosition = 2;
    if (has_kpposition()) {
      total_size += 1 + 4;
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 movement = 4;
    if (has_movement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movement());
    }

    // optional int32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional string path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInformationTransmit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInformationTransmit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInformationTransmit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInformationTransmit::MergeFrom(const PositionInformationTransmit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trainid()) {
      set_trainid(from.trainid());
    }
    if (from.has_kpposition()) {
      set_kpposition(from.kpposition());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_movement()) {
      set_movement(from.movement());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInformationTransmit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInformationTransmit::CopyFrom(const PositionInformationTransmit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInformationTransmit::IsInitialized() const {

  return true;
}

void PositionInformationTransmit::Swap(PositionInformationTransmit* other) {
  if (other != this) {
    std::swap(trainid_, other->trainid_);
    std::swap(kpposition_, other->kpposition_);
    std::swap(mode_, other->mode_);
    std::swap(movement_, other->movement_);
    std::swap(direction_, other->direction_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInformationTransmit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInformationTransmit_descriptor_;
  metadata.reflection = PositionInformationTransmit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionInformationReceive::kServernameFieldNumber;
#endif  // !_MSC_VER

PositionInformationReceive::PositionInformationReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionInformationReceive)
}

void PositionInformationReceive::InitAsDefaultInstance() {
}

PositionInformationReceive::PositionInformationReceive(const PositionInformationReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionInformationReceive)
}

void PositionInformationReceive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInformationReceive::~PositionInformationReceive() {
  // @@protoc_insertion_point(destructor:PositionInformationReceive)
  SharedDtor();
}

void PositionInformationReceive::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void PositionInformationReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInformationReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationReceive_descriptor_;
}

const PositionInformationReceive& PositionInformationReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

PositionInformationReceive* PositionInformationReceive::default_instance_ = NULL;

PositionInformationReceive* PositionInformationReceive::New() const {
  return new PositionInformationReceive;
}

void PositionInformationReceive::Clear() {
  if (has_servername()) {
    if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      servername_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInformationReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionInformationReceive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string servername = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionInformationReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionInformationReceive)
  return false;
#undef DO_
}

void PositionInformationReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionInformationReceive)
  // optional string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionInformationReceive)
}

::google::protobuf::uint8* PositionInformationReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionInformationReceive)
  // optional string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionInformationReceive)
  return target;
}

int PositionInformationReceive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInformationReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInformationReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInformationReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInformationReceive::MergeFrom(const PositionInformationReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInformationReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInformationReceive::CopyFrom(const PositionInformationReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInformationReceive::IsInitialized() const {

  return true;
}

void PositionInformationReceive::Swap(PositionInformationReceive* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInformationReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInformationReceive_descriptor_;
  metadata.reflection = PositionInformationReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOperationModeCommand::kModeFieldNumber;
#endif  // !_MSC_VER

SetOperationModeCommand::SetOperationModeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetOperationModeCommand)
}

void SetOperationModeCommand::InitAsDefaultInstance() {
}

SetOperationModeCommand::SetOperationModeCommand(const SetOperationModeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetOperationModeCommand)
}

void SetOperationModeCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOperationModeCommand::~SetOperationModeCommand() {
  // @@protoc_insertion_point(destructor:SetOperationModeCommand)
  SharedDtor();
}

void SetOperationModeCommand::SharedDtor() {
  if (mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mode_;
  }
  if (this != default_instance_) {
  }
}

void SetOperationModeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOperationModeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationModeCommand_descriptor_;
}

const SetOperationModeCommand& SetOperationModeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

SetOperationModeCommand* SetOperationModeCommand::default_instance_ = NULL;

SetOperationModeCommand* SetOperationModeCommand::New() const {
  return new SetOperationModeCommand;
}

void SetOperationModeCommand::Clear() {
  if (has_mode()) {
    if (mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mode_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOperationModeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetOperationModeCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetOperationModeCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetOperationModeCommand)
  return false;
#undef DO_
}

void SetOperationModeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetOperationModeCommand)
  // required string mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetOperationModeCommand)
}

::google::protobuf::uint8* SetOperationModeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetOperationModeCommand)
  // required string mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetOperationModeCommand)
  return target;
}

int SetOperationModeCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOperationModeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOperationModeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOperationModeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOperationModeCommand::MergeFrom(const SetOperationModeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOperationModeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOperationModeCommand::CopyFrom(const SetOperationModeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOperationModeCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetOperationModeCommand::Swap(SetOperationModeCommand* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOperationModeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOperationModeCommand_descriptor_;
  metadata.reflection = SetOperationModeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOperationModeResponse::kPreviousmodeFieldNumber;
const int SetOperationModeResponse::kNewmodeFieldNumber;
#endif  // !_MSC_VER

SetOperationModeResponse::SetOperationModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetOperationModeResponse)
}

void SetOperationModeResponse::InitAsDefaultInstance() {
}

SetOperationModeResponse::SetOperationModeResponse(const SetOperationModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetOperationModeResponse)
}

void SetOperationModeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  previousmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOperationModeResponse::~SetOperationModeResponse() {
  // @@protoc_insertion_point(destructor:SetOperationModeResponse)
  SharedDtor();
}

void SetOperationModeResponse::SharedDtor() {
  if (previousmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete previousmode_;
  }
  if (newmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newmode_;
  }
  if (this != default_instance_) {
  }
}

void SetOperationModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOperationModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationModeResponse_descriptor_;
}

const SetOperationModeResponse& SetOperationModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

SetOperationModeResponse* SetOperationModeResponse::default_instance_ = NULL;

SetOperationModeResponse* SetOperationModeResponse::New() const {
  return new SetOperationModeResponse;
}

void SetOperationModeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_previousmode()) {
      if (previousmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        previousmode_->clear();
      }
    }
    if (has_newmode()) {
      if (newmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newmode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOperationModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetOperationModeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string previousmode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previousmode().data(), this->previousmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "previousmode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newmode;
        break;
      }

      // required string newmode = 2;
      case 2: {
        if (tag == 18) {
         parse_newmode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newmode().data(), this->newmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newmode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetOperationModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetOperationModeResponse)
  return false;
#undef DO_
}

void SetOperationModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetOperationModeResponse)
  // required string previousmode = 1;
  if (has_previousmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousmode().data(), this->previousmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previousmode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->previousmode(), output);
  }

  // required string newmode = 2;
  if (has_newmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newmode().data(), this->newmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newmode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetOperationModeResponse)
}

::google::protobuf::uint8* SetOperationModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetOperationModeResponse)
  // required string previousmode = 1;
  if (has_previousmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousmode().data(), this->previousmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previousmode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->previousmode(), target);
  }

  // required string newmode = 2;
  if (has_newmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newmode().data(), this->newmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newmode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetOperationModeResponse)
  return target;
}

int SetOperationModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string previousmode = 1;
    if (has_previousmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previousmode());
    }

    // required string newmode = 2;
    if (has_newmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOperationModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOperationModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOperationModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOperationModeResponse::MergeFrom(const SetOperationModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_previousmode()) {
      set_previousmode(from.previousmode());
    }
    if (from.has_newmode()) {
      set_newmode(from.newmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOperationModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOperationModeResponse::CopyFrom(const SetOperationModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOperationModeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetOperationModeResponse::Swap(SetOperationModeResponse* other) {
  if (other != this) {
    std::swap(previousmode_, other->previousmode_);
    std::swap(newmode_, other->newmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOperationModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOperationModeResponse_descriptor_;
  metadata.reflection = SetOperationModeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int traindata::kKpPositionFieldNumber;
const int traindata::kModeFieldNumber;
const int traindata::kMovementFieldNumber;
const int traindata::kDirectionFieldNumber;
const int traindata::kPathFieldNumber;
#endif  // !_MSC_VER

traindata::traindata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:traindata)
}

void traindata::InitAsDefaultInstance() {
}

traindata::traindata(const traindata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:traindata)
}

void traindata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kpposition_ = 0;
  mode_ = 0;
  movement_ = 0;
  direction_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

traindata::~traindata() {
  // @@protoc_insertion_point(destructor:traindata)
  SharedDtor();
}

void traindata::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void traindata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* traindata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return traindata_descriptor_;
}

const traindata& traindata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

traindata* traindata::default_instance_ = NULL;

traindata* traindata::New() const {
  return new traindata;
}

void traindata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<traindata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(kpposition_, direction_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool traindata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:traindata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float kpPosition = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kpposition_)));
          set_has_kpposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional int32 mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_movement;
        break;
      }

      // optional int32 movement = 3;
      case 3: {
        if (tag == 24) {
         parse_movement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movement_)));
          set_has_movement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }

      // optional int32 direction = 4;
      case 4: {
        if (tag == 32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // optional string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:traindata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:traindata)
  return false;
#undef DO_
}

void traindata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:traindata)
  // optional float kpPosition = 1;
  if (has_kpposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kpposition(), output);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  // optional int32 movement = 3;
  if (has_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movement(), output);
  }

  // optional int32 direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->direction(), output);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:traindata)
}

::google::protobuf::uint8* traindata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:traindata)
  // optional float kpPosition = 1;
  if (has_kpposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->kpposition(), target);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }

  // optional int32 movement = 3;
  if (has_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movement(), target);
  }

  // optional int32 direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->direction(), target);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:traindata)
  return target;
}

int traindata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float kpPosition = 1;
    if (has_kpposition()) {
      total_size += 1 + 4;
    }

    // optional int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 movement = 3;
    if (has_movement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movement());
    }

    // optional int32 direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void traindata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const traindata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const traindata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void traindata::MergeFrom(const traindata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kpposition()) {
      set_kpposition(from.kpposition());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_movement()) {
      set_movement(from.movement());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void traindata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void traindata::CopyFrom(const traindata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool traindata::IsInitialized() const {

  return true;
}

void traindata::Swap(traindata* other) {
  if (other != this) {
    std::swap(kpposition_, other->kpposition_);
    std::swap(mode_, other->mode_);
    std::swap(movement_, other->movement_);
    std::swap(direction_, other->direction_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata traindata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = traindata_descriptor_;
  metadata.reflection = traindata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapTrainData::kIpaddressFieldNumber;
const int MapTrainData::kTraindataFieldNumber;
#endif  // !_MSC_VER

MapTrainData::MapTrainData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapTrainData)
}

void MapTrainData::InitAsDefaultInstance() {
  traindata_ = const_cast< ::traindata*>(&::traindata::default_instance());
}

MapTrainData::MapTrainData(const MapTrainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapTrainData)
}

void MapTrainData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traindata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapTrainData::~MapTrainData() {
  // @@protoc_insertion_point(destructor:MapTrainData)
  SharedDtor();
}

void MapTrainData::SharedDtor() {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (this != default_instance_) {
    delete traindata_;
  }
}

void MapTrainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapTrainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapTrainData_descriptor_;
}

const MapTrainData& MapTrainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

MapTrainData* MapTrainData::default_instance_ = NULL;

MapTrainData* MapTrainData::New() const {
  return new MapTrainData;
}

void MapTrainData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipaddress_->clear();
      }
    }
    if (has_traindata()) {
      if (traindata_ != NULL) traindata_->::traindata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapTrainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapTrainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipaddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_traindata;
        break;
      }

      // optional .traindata traindata = 2;
      case 2: {
        if (tag == 18) {
         parse_traindata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traindata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapTrainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapTrainData)
  return false;
#undef DO_
}

void MapTrainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapTrainData)
  // required string ipaddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddress(), output);
  }

  // optional .traindata traindata = 2;
  if (has_traindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traindata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapTrainData)
}

::google::protobuf::uint8* MapTrainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapTrainData)
  // required string ipaddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddress(), target);
  }

  // optional .traindata traindata = 2;
  if (has_traindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->traindata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapTrainData)
  return target;
}

int MapTrainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipaddress = 1;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional .traindata traindata = 2;
    if (has_traindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traindata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapTrainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapTrainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapTrainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapTrainData::MergeFrom(const MapTrainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_traindata()) {
      mutable_traindata()->::traindata::MergeFrom(from.traindata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapTrainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTrainData::CopyFrom(const MapTrainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTrainData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapTrainData::Swap(MapTrainData* other) {
  if (other != this) {
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(traindata_, other->traindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapTrainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapTrainData_descriptor_;
  metadata.reflection = MapTrainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFleetCommand::kIpaddressFieldNumber;
#endif  // !_MSC_VER

GetFleetCommand::GetFleetCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetFleetCommand)
}

void GetFleetCommand::InitAsDefaultInstance() {
}

GetFleetCommand::GetFleetCommand(const GetFleetCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetFleetCommand)
}

void GetFleetCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFleetCommand::~GetFleetCommand() {
  // @@protoc_insertion_point(destructor:GetFleetCommand)
  SharedDtor();
}

void GetFleetCommand::SharedDtor() {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (this != default_instance_) {
  }
}

void GetFleetCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFleetCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFleetCommand_descriptor_;
}

const GetFleetCommand& GetFleetCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

GetFleetCommand* GetFleetCommand::default_instance_ = NULL;

GetFleetCommand* GetFleetCommand::New() const {
  return new GetFleetCommand;
}

void GetFleetCommand::Clear() {
  if (has_ipaddress()) {
    if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ipaddress_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFleetCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetFleetCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipaddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetFleetCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetFleetCommand)
  return false;
#undef DO_
}

void GetFleetCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetFleetCommand)
  // required string ipaddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetFleetCommand)
}

::google::protobuf::uint8* GetFleetCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetFleetCommand)
  // required string ipaddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetFleetCommand)
  return target;
}

int GetFleetCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipaddress = 1;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFleetCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFleetCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFleetCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFleetCommand::MergeFrom(const GetFleetCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFleetCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFleetCommand::CopyFrom(const GetFleetCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFleetCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFleetCommand::Swap(GetFleetCommand* other) {
  if (other != this) {
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFleetCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFleetCommand_descriptor_;
  metadata.reflection = GetFleetCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFleetResponse::kTraindataFieldNumber;
#endif  // !_MSC_VER

GetFleetResponse::GetFleetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetFleetResponse)
}

void GetFleetResponse::InitAsDefaultInstance() {
}

GetFleetResponse::GetFleetResponse(const GetFleetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetFleetResponse)
}

void GetFleetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFleetResponse::~GetFleetResponse() {
  // @@protoc_insertion_point(destructor:GetFleetResponse)
  SharedDtor();
}

void GetFleetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFleetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFleetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFleetResponse_descriptor_;
}

const GetFleetResponse& GetFleetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCFProtoServices_2eproto();
  return *default_instance_;
}

GetFleetResponse* GetFleetResponse::default_instance_ = NULL;

GetFleetResponse* GetFleetResponse::New() const {
  return new GetFleetResponse;
}

void GetFleetResponse::Clear() {
  traindata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFleetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetFleetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapTrainData traindata = 1;
      case 1: {
        if (tag == 10) {
         parse_traindata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traindata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_traindata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetFleetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetFleetResponse)
  return false;
#undef DO_
}

void GetFleetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetFleetResponse)
  // repeated .MapTrainData traindata = 1;
  for (int i = 0; i < this->traindata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traindata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetFleetResponse)
}

::google::protobuf::uint8* GetFleetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetFleetResponse)
  // repeated .MapTrainData traindata = 1;
  for (int i = 0; i < this->traindata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->traindata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetFleetResponse)
  return target;
}

int GetFleetResponse::ByteSize() const {
  int total_size = 0;

  // repeated .MapTrainData traindata = 1;
  total_size += 1 * this->traindata_size();
  for (int i = 0; i < this->traindata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traindata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFleetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFleetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFleetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFleetResponse::MergeFrom(const GetFleetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  traindata_.MergeFrom(from.traindata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFleetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFleetResponse::CopyFrom(const GetFleetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFleetResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->traindata())) return false;
  return true;
}

void GetFleetResponse::Swap(GetFleetResponse* other) {
  if (other != this) {
    traindata_.Swap(&other->traindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFleetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFleetResponse_descriptor_;
  metadata.reflection = GetFleetResponse_reflection_;
  return metadata;
}


// ===================================================================

PositionInformationService::~PositionInformationService() {}

const ::google::protobuf::ServiceDescriptor* PositionInformationService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PositionInformationService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationService_descriptor_;
}

void PositionInformationService::PositionInformation(::google::protobuf::RpcController* controller,
                         const ::PositionInformationTransmit*,
                         ::PositionInformationReceive*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PositionInformation() not implemented.");
  done->Run();
}

void PositionInformationService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PositionInformationService_descriptor_);
  switch(method->index()) {
    case 0:
      PositionInformation(controller,
             ::google::protobuf::down_cast<const ::PositionInformationTransmit*>(request),
             ::google::protobuf::down_cast< ::PositionInformationReceive*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PositionInformationService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PositionInformationTransmit::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PositionInformationService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PositionInformationReceive::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PositionInformationService_Stub::PositionInformationService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PositionInformationService_Stub::PositionInformationService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PositionInformationService_Stub::~PositionInformationService_Stub() {
  if (owns_channel_) delete channel_;
}

void PositionInformationService_Stub::PositionInformation(::google::protobuf::RpcController* controller,
                              const ::PositionInformationTransmit* request,
                              ::PositionInformationReceive* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

SetOperationModeService::~SetOperationModeService() {}

const ::google::protobuf::ServiceDescriptor* SetOperationModeService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationModeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SetOperationModeService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationModeService_descriptor_;
}

void SetOperationModeService::SetOperationMode(::google::protobuf::RpcController* controller,
                         const ::SetOperationModeCommand*,
                         ::SetOperationModeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetOperationMode() not implemented.");
  done->Run();
}

void SetOperationModeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SetOperationModeService_descriptor_);
  switch(method->index()) {
    case 0:
      SetOperationMode(controller,
             ::google::protobuf::down_cast<const ::SetOperationModeCommand*>(request),
             ::google::protobuf::down_cast< ::SetOperationModeResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SetOperationModeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SetOperationModeCommand::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SetOperationModeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SetOperationModeResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SetOperationModeService_Stub::SetOperationModeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SetOperationModeService_Stub::SetOperationModeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SetOperationModeService_Stub::~SetOperationModeService_Stub() {
  if (owns_channel_) delete channel_;
}

void SetOperationModeService_Stub::SetOperationMode(::google::protobuf::RpcController* controller,
                              const ::SetOperationModeCommand* request,
                              ::SetOperationModeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

GetFleetService::~GetFleetService() {}

const ::google::protobuf::ServiceDescriptor* GetFleetService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFleetService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* GetFleetService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFleetService_descriptor_;
}

void GetFleetService::GetFleet(::google::protobuf::RpcController* controller,
                         const ::GetFleetCommand*,
                         ::GetFleetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFleet() not implemented.");
  done->Run();
}

void GetFleetService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), GetFleetService_descriptor_);
  switch(method->index()) {
    case 0:
      GetFleet(controller,
             ::google::protobuf::down_cast<const ::GetFleetCommand*>(request),
             ::google::protobuf::down_cast< ::GetFleetResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GetFleetService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GetFleetCommand::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& GetFleetService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GetFleetResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

GetFleetService_Stub::GetFleetService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GetFleetService_Stub::GetFleetService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GetFleetService_Stub::~GetFleetService_Stub() {
  if (owns_channel_) delete channel_;
}

void GetFleetService_Stub::GetFleet(::google::protobuf::RpcController* controller,
                              const ::GetFleetCommand* request,
                              ::GetFleetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
