// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestRCFProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TestRCFProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PositionInformationTransmit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInformationTransmit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionInformationReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionInformationReceive_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PositionInformationService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TestRCFProto_2eproto() {
  protobuf_AddDesc_TestRCFProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TestRCFProto.proto");
  GOOGLE_CHECK(file != NULL);
  PositionInformationTransmit_descriptor_ = file->message_type(0);
  static const int PositionInformationTransmit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, trainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, status_),
  };
  PositionInformationTransmit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInformationTransmit_descriptor_,
      PositionInformationTransmit::default_instance_,
      PositionInformationTransmit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationTransmit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInformationTransmit));
  PositionInformationReceive_descriptor_ = file->message_type(1);
  static const int PositionInformationReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, servername_),
  };
  PositionInformationReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionInformationReceive_descriptor_,
      PositionInformationReceive::default_instance_,
      PositionInformationReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInformationReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionInformationReceive));
  PositionInformationService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TestRCFProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInformationTransmit_descriptor_, &PositionInformationTransmit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionInformationReceive_descriptor_, &PositionInformationReceive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TestRCFProto_2eproto() {
  delete PositionInformationTransmit::default_instance_;
  delete PositionInformationTransmit_reflection_;
  delete PositionInformationReceive::default_instance_;
  delete PositionInformationReceive_reflection_;
}

void protobuf_AddDesc_TestRCFProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TestRCFProto.proto\"P\n\033PositionInformat"
    "ionTransmit\022\017\n\007trainID\030\001 \002(\t\022\020\n\010position"
    "\030\002 \002(\t\022\016\n\006status\030\003 \001(\005\"0\n\032PositionInform"
    "ationReceive\022\022\n\nserverName\030\002 \002(\t2n\n\032Posi"
    "tionInformationService\022P\n\023PositionInform"
    "ation\022\034.PositionInformationTransmit\032\033.Po"
    "sitionInformationReceiveB\t\200\001\001\210\001\001\220\001\001", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TestRCFProto.proto", &protobuf_RegisterTypes);
  PositionInformationTransmit::default_instance_ = new PositionInformationTransmit();
  PositionInformationReceive::default_instance_ = new PositionInformationReceive();
  PositionInformationTransmit::default_instance_->InitAsDefaultInstance();
  PositionInformationReceive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TestRCFProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TestRCFProto_2eproto {
  StaticDescriptorInitializer_TestRCFProto_2eproto() {
    protobuf_AddDesc_TestRCFProto_2eproto();
  }
} static_descriptor_initializer_TestRCFProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PositionInformationTransmit::kTrainIDFieldNumber;
const int PositionInformationTransmit::kPositionFieldNumber;
const int PositionInformationTransmit::kStatusFieldNumber;
#endif  // !_MSC_VER

PositionInformationTransmit::PositionInformationTransmit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionInformationTransmit)
}

void PositionInformationTransmit::InitAsDefaultInstance() {
}

PositionInformationTransmit::PositionInformationTransmit(const PositionInformationTransmit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionInformationTransmit)
}

void PositionInformationTransmit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInformationTransmit::~PositionInformationTransmit() {
  // @@protoc_insertion_point(destructor:PositionInformationTransmit)
  SharedDtor();
}

void PositionInformationTransmit::SharedDtor() {
  if (trainid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trainid_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void PositionInformationTransmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInformationTransmit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationTransmit_descriptor_;
}

const PositionInformationTransmit& PositionInformationTransmit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TestRCFProto_2eproto();
  return *default_instance_;
}

PositionInformationTransmit* PositionInformationTransmit::default_instance_ = NULL;

PositionInformationTransmit* PositionInformationTransmit::New() const {
  return new PositionInformationTransmit;
}

void PositionInformationTransmit::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_trainid()) {
      if (trainid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trainid_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInformationTransmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionInformationTransmit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trainID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trainid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trainid().data(), this->trainid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trainid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required string position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionInformationTransmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionInformationTransmit)
  return false;
#undef DO_
}

void PositionInformationTransmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionInformationTransmit)
  // required string trainID = 1;
  if (has_trainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainid().data(), this->trainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trainid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trainid(), output);
  }

  // required string position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->position(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionInformationTransmit)
}

::google::protobuf::uint8* PositionInformationTransmit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionInformationTransmit)
  // required string trainID = 1;
  if (has_trainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trainid().data(), this->trainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trainid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trainid(), target);
  }

  // required string position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->position(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionInformationTransmit)
  return target;
}

int PositionInformationTransmit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string trainID = 1;
    if (has_trainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trainid());
    }

    // required string position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInformationTransmit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInformationTransmit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInformationTransmit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInformationTransmit::MergeFrom(const PositionInformationTransmit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trainid()) {
      set_trainid(from.trainid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInformationTransmit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInformationTransmit::CopyFrom(const PositionInformationTransmit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInformationTransmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PositionInformationTransmit::Swap(PositionInformationTransmit* other) {
  if (other != this) {
    std::swap(trainid_, other->trainid_);
    std::swap(position_, other->position_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInformationTransmit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInformationTransmit_descriptor_;
  metadata.reflection = PositionInformationTransmit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionInformationReceive::kServerNameFieldNumber;
#endif  // !_MSC_VER

PositionInformationReceive::PositionInformationReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionInformationReceive)
}

void PositionInformationReceive::InitAsDefaultInstance() {
}

PositionInformationReceive::PositionInformationReceive(const PositionInformationReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PositionInformationReceive)
}

void PositionInformationReceive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionInformationReceive::~PositionInformationReceive() {
  // @@protoc_insertion_point(destructor:PositionInformationReceive)
  SharedDtor();
}

void PositionInformationReceive::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void PositionInformationReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInformationReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationReceive_descriptor_;
}

const PositionInformationReceive& PositionInformationReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TestRCFProto_2eproto();
  return *default_instance_;
}

PositionInformationReceive* PositionInformationReceive::default_instance_ = NULL;

PositionInformationReceive* PositionInformationReceive::New() const {
  return new PositionInformationReceive;
}

void PositionInformationReceive::Clear() {
  if (has_servername()) {
    if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      servername_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionInformationReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositionInformationReceive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverName = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositionInformationReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositionInformationReceive)
  return false;
#undef DO_
}

void PositionInformationReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositionInformationReceive)
  // required string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositionInformationReceive)
}

::google::protobuf::uint8* PositionInformationReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionInformationReceive)
  // required string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionInformationReceive)
  return target;
}

int PositionInformationReceive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serverName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInformationReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionInformationReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionInformationReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionInformationReceive::MergeFrom(const PositionInformationReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionInformationReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInformationReceive::CopyFrom(const PositionInformationReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInformationReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PositionInformationReceive::Swap(PositionInformationReceive* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionInformationReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionInformationReceive_descriptor_;
  metadata.reflection = PositionInformationReceive_reflection_;
  return metadata;
}


// ===================================================================

PositionInformationService::~PositionInformationService() {}

const ::google::protobuf::ServiceDescriptor* PositionInformationService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PositionInformationService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionInformationService_descriptor_;
}

void PositionInformationService::PositionInformation(::google::protobuf::RpcController* controller,
                         const ::PositionInformationTransmit*,
                         ::PositionInformationReceive*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PositionInformation() not implemented.");
  done->Run();
}

void PositionInformationService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PositionInformationService_descriptor_);
  switch(method->index()) {
    case 0:
      PositionInformation(controller,
             ::google::protobuf::down_cast<const ::PositionInformationTransmit*>(request),
             ::google::protobuf::down_cast< ::PositionInformationReceive*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PositionInformationService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PositionInformationTransmit::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PositionInformationService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PositionInformationReceive::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PositionInformationService_Stub::PositionInformationService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PositionInformationService_Stub::PositionInformationService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PositionInformationService_Stub::~PositionInformationService_Stub() {
  if (owns_channel_) delete channel_;
}

void PositionInformationService_Stub::PositionInformation(::google::protobuf::RpcController* controller,
                              const ::PositionInformationTransmit* request,
                              ::PositionInformationReceive* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
